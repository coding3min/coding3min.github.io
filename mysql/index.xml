<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Mysqls on 程序员的魔法书</title><link>https://leetcode.coding3min.com/mysql/</link><description>Recent content in Mysqls on 程序员的魔法书</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://leetcode.coding3min.com/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/mysql%E7%9A%84expire_logs_days%E5%8F%82%E6%95%B0%E5%BC%95%E5%8F%91%E7%9A%84%E4%B8%BB%E4%BB%8E%E7%8A%B6%E6%80%81%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/mysql%E7%9A%84expire_logs_days%E5%8F%82%E6%95%B0%E5%BC%95%E5%8F%91%E7%9A%84%E4%B8%BB%E4%BB%8E%E7%8A%B6%E6%80%81%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98/</guid><description>我在测试主从方案的时候发现状态丢失了，同步用的binlog也不见了(binlog doesn&amp;rsquo;t exist)，非常奇怪，回顾解决以后写在这里供大家参考。
报错与原因 # 发现错误信息类似于
Slave: Table 'XXX' doesn't exist Error running query, ......，We stopped at log 'mysql-bin.000036' position 154. 赶快去找，本想看看主数据的这个文件的position 154是什么语句，使用语句
show binlog events in &amp;#39;mysql-bin.000036&amp;#39; 居然返回了502。
又到主库的服务器查看了下binlog的存储情况，发现binlog的编号是从36开始的，前面的不见了！难道设置了参数定期删除binlog？
于是又来到了my.cnf文件，查看文件之后找到了一个expire_logs_days。经搜索，确定了这个参数就是删除以前binlog文件的“罪魁祸首”。
到这来，大概明白了为啥主从同步没有成功，因为这是基于binlog的（逐行扫描sql语句进行同步写入），如果binlog文件不全，就无法正确的进行主从同步。
解决办法 # 这种情况从删除那一天起，至今所有的同步语句全部都丢失了，所以除非可以精确的知道执行了哪些语句，或者那些语句都不重要可以忽略，不然都必须要清理数据库，备份主库，重新手动更新从库来解决。可以参考我的 备份数据库这篇文章的。
如果你精确的知识执行了哪些语句，需要先停止从库，执行丢失的语句，再进行从库同步设置。
mysql&amp;gt; stop slave; Query OK, 0 rows affected, 1 warning (0.00 sec) mysql&amp;gt; reset slave; Query OK, 0 rows affected (0.00 sec) .....执行你的语句 mysql&amp;gt; change master to master_host=&amp;#39;192.168.1.51&amp;#39;, master_user=&amp;#39;replslave&amp;#39;, master_password=&amp;#39;replslave&amp;#39;, master_log_file=&amp;#39;mysql-bin-000002&amp;#39;,master_log_pos=168; Query OK, 0 rows affected (0.</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/relaylog/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/relaylog/</guid><description>前言：MySQL进行主主复制或主从复制的时候会在home目录下面产生相应的relay log，本文档总结这些相关参数的定义及解释.
1、什么是relay log # The relay log, like the binary log, consists of a set of numbered files containing events that describe database changes, and an index file that contains the names of all used relay log files. The term &amp;ldquo;relay log file&amp;rdquo; generally denotes an individual numbered file containing database events. The term&amp;quot;relay log&amp;quot; collectively denotes the set of numbered relay log files plus the index file</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/%E4%B8%BB%E4%BB%8E%E5%88%87%E6%8D%A2/</guid><description>[TOC]
1、主库停止应用，确认主库不再有数据生成 # 将主库改为 read_only 模式
mysql&amp;gt; set global super_read_only=on; Query OK, 0 rows affected (0.00 sec) mysql&amp;gt; set global read_only=on; Query OK, 0 rows affected (0.00 sec) 2、查看主备库数据是否一致 # 主库：
mysql&amp;gt; show master status; +------------------+----------+--------------+------------------+-----------------------------------------------+ | File | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set | +------------------+----------+--------------+------------------+-----------------------------------------------+ | mysql-bin.000012 | 195 | | | 8876d804-9218-11e8-8eaf-0242ac110002:1-224227 | +------------------+----------+--------------+------------------+-----------------------------------------------+ 1 row in set (0.00 sec) mysql&amp;gt; select @@server_uuid; +--------------------------------------+ | @@server_uuid | +--------------------------------------+ | 8876d804-9218-11e8-8eaf-0242ac110002 | +--------------------------------------+ 1 row in set (0.</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/%E5%B8%B8%E8%A7%81%E6%95%85%E9%9A%9C/</guid><description>【ERROR】1452:无法在外键的表插入或更新参考主键没有的数据。 # 主键在从库不存在时会发生这样的问题，报1452错误。此时可以检查参考的表的主键是否有主库对应的数据，如果有，则插入参考的表相应的数据，再开启复制恢复SQL线程。
【ERROR】1032:删除或更新从库的数据，从库找不到记录。 # 此时，主库的数据是比从库新的，可以采取从库添加相同的数据再开启复制恢复SQL线程。
【ERROR】1062:从库插入数据，发生唯一性冲突。 # 此时从库已经有相同主键的数据，如果再插入相同主键值的数据则会报错。可以查看主库的改行数据与从库的要插入数据是否一致，如一致则跳过错误，恢复SQL线程，如不一致，则以主库为准，将从库的该行记录删除，再开启复制。
【ERROR】1201: Could not initialize master info structure. # 出现这个错误的原因是因为从库之前已经做过主从复制,所以需要先停止从库，再进行从库同步设置。
具体的解决方法如下：
mysql&amp;gt; change master to master_host=&amp;#39;192.168.1.51&amp;#39;, master_user=&amp;#39;replslave&amp;#39;, master_password=&amp;#39;replslave&amp;#39;, master_log_file=&amp;#39;mysql-bin-000002&amp;#39;,master_log_pos=168; ERROR 1201 (HY000): Could not initialize master info structure; more error messa ges can be found in the MySQL error log mysql&amp;gt; stop slave; Query OK, 0 rows affected, 1 warning (0.00 sec) mysql&amp;gt; reset slave; Query OK, 0 rows affected (0.</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/%E5%BB%BA%E7%AB%8B%E4%B8%BB%E4%BB%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/%E5%BB%BA%E7%AB%8B%E4%B8%BB%E4%BB%8E/</guid><description>前提 # 本方案是两节点主从方案，只要建立好主从，及时数据库挂掉又拉起主从模式不会失效。
保证时间同步 保证都安装了mysql/mariadb 建立主从的过程 # 这里介绍的是两节点主从，如果是集群模式，至少需要三个节点，因为偶数个节点是导致脑裂高发的原因（无法确定该同步谁的）。
主从服务器节点设置不同的server-id 启用二进制日志和relaylog 主节点创建一个拥有复制权限的用户账号 查询主节点binlog信息 设置从节点同步主节点 停止所有写入 # 在所有服务器上执行此步
在所有服务器上执行此步
在所有服务器上执行此步
停止所有写入是为了防止数据设置同步的过程中数据不一致。
如果 mariadb 是通过 hosts 文件中的域名进行访问的，那么只需要编辑 /etc/hosts , 把mysql的域名解析删掉就可以停止所有读写，执行以下命令。
关掉所有读写mysql的服务，你也可以直接用iptables来禁用端口通信（如果应用有自动重连机制的话，否则只能重启应用了）
等待 1 分钟，依次进入集群中所有的 mariadb ，查看进程状态，确保没有额外的读写操作( command 列除了 show processlist 外没有多余的 sleep 和 query )。
MariaDB [(none)]&amp;gt; show processlist; 备份与导入 # 首先，你需要保证所有的节点数据一致，在升级过程中万一升级失败能及时的恢复数据。
请参考本小册 备份数据库
添加一个专门用来同步的用户 # 在从节点中的 mariadb 执行以下命令，如果全部输出 ok，则继续。
/usr/local/mariadb/bin/mysql -A -e &amp;#34;GRANT replication slave ON *.</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88%E5%88%87%E6%8D%A2%E4%B8%BA%E4%BA%92%E4%B8%BA%E4%B8%BB%E4%BB%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E4%B8%BB%E4%BB%8E/%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88%E5%88%87%E6%8D%A2%E4%B8%BA%E4%BA%92%E4%B8%BA%E4%B8%BB%E4%BB%8E/</guid><description>文档目标 # 由于集群模式容易出现脑裂，恢复起来速度慢，难度大，不稳定，所以采用主从模式托管，容易恢复，更加稳定，同时建立成功主从模式以后，及时关机再重启也不会丢失主从状态。
通过本文档可以把mariadb或mysql从三节点集群模式切换为互为主从（成环）
相对于集群的好处就是不会发生脑裂，故障恢复相对比较容易 坏处是如果挂掉一个节点时，剩下的两个节点就会变成主从模式，如果应用读写到从节点，那么数据就不同步了，需要等待恢复以后才能自动同步（所以我们要控制，挂掉一个节点后，让读写正确的切换到主节点上，可能要keepalived、haproxy的配合） [TOC]
0、检查是否是集群状态 # ps: 监测当前是否是集群模式, 而且整个集群的所有服务器正常，如果不是 ON ，则停止操作，并联系管理员。
在集群中所有服务器上执行
MariaDB [(none)]&amp;gt; show global variables like &amp;#39;%wsrep_on%&amp;#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | wsrep_on | ON | +---------------+-------+ 1 row in set (0.00 sec) 1、停止所有写入 # 在集群所有服务器上执行此步
在集群所有服务器上执行此步
在集群所有服务器上执行此步
如果 mariadb 是通过 hosts 文件中的域名进行访问的，那么只需要编辑 /etc/hosts , 把 mysql.cloud.local 的域名解析删掉就可以停止所有读写，执行以下命令。
cp /etc/hosts /etc/hosts.bak sed -i &amp;#34;/mysql.cloud.local/d&amp;#34; /etc/hosts 等待1分钟，依次进入集群中所有的 mariadb ，查看进程状态，确保没有额外的读写操作( command 列除了 show processlist 外没有多余的 sleep 和 query )。</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/mysql%E6%AD%A3%E7%A1%AE%E6%B8%85%E7%90%86binlog%E6%97%A5%E5%BF%97%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/mysql%E6%AD%A3%E7%A1%AE%E6%B8%85%E7%90%86binlog%E6%97%A5%E5%BF%97%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95/</guid><description>前言 # MySQL 中的 binlog 日志记录了数据库中数据的变动，便于对数据的基于时间点和基于位置的恢复，但是 binlog 也会日渐增大，占用很大的磁盘空间，因此，要对 binlog 使用正确安全的方法清理掉一部分没用的日志
方法一、手动清理 binlog # 清理前的准备：
查看主库和从库正在使用的 binlog 是哪个文件
show master status \G show slave status \G 在删除 binlog 日志之前，首先对 binlog 日志备份，以防万一
开始动手删除 binlog： 删除指定日期以前的日志索引中 binlog 日志文件
purge master logs before&amp;#39;2016-09-01 17:20:00&amp;#39;; 或 删除指定日志文件的日志索引中 binlog 日志文件
purge master logs to&amp;#39;mysql-bin.000022&amp;#39;; 注意：时间和文件名一定不可以写错，尤其是时间中的年和文件名中的序号，以防不小心将正在使用的 binlog 删除！！！&amp;gt; 切勿删除正在使用的 binlog！！！ 使用该语法，会将对应的文件和 mysql-bin.index 中的对应路径删除。
方法二、通过设置 binlog 过期的时间，使系统自动删除 binlog 文件 # 临时生效
mysql&amp;gt; show variables like &amp;#39;expire_logs_days&amp;#39;; +------------------+-------+ | Variable_name | Value | +------------------+-------+ | expire_logs_days | 0 | +------------------+-------+ mysql&amp;gt; set global expire_logs_days = 30; #设置binlog多少天过期 长期生效需要修改配置文件</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%BA%93/</guid><description>备份数据库 # 主库锁表
flush table with read lock; 备份数据库（会有压缩，测试数据 11G，得到备份文件 227M）
其中 max_allowed_packet 和 net_buffer_length 两个参数是用来加速的，可以查看从库数据 如果 root 有密码请加上参数例如 -uroot -proot /usr/local/mariadb/bin/mysqldump --max_allowed_packet=33554432 --net_buffer_length=8192 --events -A -B |gzip &amp;gt;/server/backup/mysql_bak.$(date +%F).sql.gz PS: 如果上面的命令报错如下
Couldn&amp;#39;t execute &amp;#39;show events&amp;#39;: Cannot proceed because system tables used by Event Scheduler were found damaged at server start (1577) 请执行命令(如果 root 有密码请加上参数例如 -uroot -proot )
/usr/local/mariadb/bin/mysql_upgrade 备份结束后，解锁主库，恢复读写
unlock tables; 拷贝到从库中
注意日期一定有所不同，如果端口不是默认的请叫参数 -P 端口号 注意确保 /root 目录有足够的空间，如果空间不够请切换目录 scp /server/backup/mysql_bak.</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/%E5%BF%98%E8%AE%B0%E5%AF%86%E7%A0%81/</guid><description>root 用户无法免密登陆，同时又忘记了密码?
/usr/local/mariadb/bin/mysqladmin -u有权限的用户名 -p密码 shutdown /usr/local/mariadb/bin/mysqld_safe --skip-grant-tables &amp;amp; mysql -A -e &amp;#34;update mysql.user set password=password(&amp;#39;root&amp;#39;) where user=&amp;#39;root&amp;#39;&amp;#34;; mysql -A -e &amp;#34;flush privileges;&amp;#34; /usr/local/mariadb/bin/mysqladmin shutdown mkdir -p /var/run/mariadb; chown -R mysql:mysql /var/run/mariadb; /usr/local/mariadb/bin/mysqld_safe --datadir=/data/mariadb/data --pid-file=/var/run/mariadb/mariadb.pid &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</guid><description>注意事项 # mysql.sock不要放在tmp目录下面 # 执行命令，更改mariadb.sock文件位置，防止/tmp目录下文件被删除导致挂掉
sed -i &amp;#34;s/\/tmp\/mariadb.sock/\/data\/mariadb\/mariadb.sock/g&amp;#34; /etc/my.cnf.d/client.cnf sed -i &amp;#34;s/\/tmp\/mariadb.sock/\/data\/mariadb\/mariadb.sock/g&amp;#34; /etc/my.cnf 修改完确认上面命令中的两个文件是不是都成功修改了mariadb.sock的目录，为/data/mariadb/mariadb.sock，如果没有手动修改。</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/%E9%87%8D%E5%BB%BAmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E8%BF%90%E7%BB%B4/%E9%87%8D%E5%BB%BAmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%96%B9%E6%B3%95/</guid><description>本操作是高危操作，会导致所有数据丢掉，用来恢复无法恢复的mysql，重建以后再导入备份好的数据。
1、停止MySql数据库的运行 2、删除mysql/var里面的所有数据库，这里是数据目录，具体请查看/etc/my.cnf的配置 3、进入mysql/bin目录下，执行./mysql_install_db命令 此时会在mysql/var目录下创建两个目录文件mysql、test 4、修改mysql、test两个目录及目录下所有文件的权限：
chown mysql:mysql -R mysql test 注意这里一定要加上-R参数，否则启动会报错 5、启动数据库
./mysqld_safe --user=mysql &amp;amp; 6、修改root密码
mysql/bin/mysqladmin -u root password &amp;#34;yourpasswd&amp;#34; 这样，就完成了MySql数据库的重建了。关于停止MySql的运行，直接用启动MYSQL服务命令也行，也可以用停止进程的方法。启动数据库也可以直接用启动MYSQL服务的命令来启动。</description></item><item><title/><link>https://leetcode.coding3min.com/mysql/%E9%9B%86%E7%BE%A4/%E5%BF%AB%E9%80%9F%E6%8B%89%E8%B5%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://leetcode.coding3min.com/mysql/%E9%9B%86%E7%BE%A4/%E5%BF%AB%E9%80%9F%E6%8B%89%E8%B5%B7/</guid><description>当Mariadb集群因故障重启时，有时会遇到Mariadb Galera Cluster集群无法正常启动的情况。有很多方式能将数据库拉起，但是如何做到快速启动，又不丢失数据呢？
找到数据最新的节点 # 对比三个节点日志中的New cluster view: global state状态，可知道那个节点中的数据是最新的。
[mysql@test45 logs]$ grep &amp;#34;New cluster view&amp;#34; mariadb.log |awk -F: &amp;#39;END { print $1&amp;#34;:&amp;#34;$2&amp;#34;:&amp;#34;$3 $6&amp;#34;:&amp;#34;$7}&amp;#39; 180518 14:59:00 [Note] WSREP 874d8e7e-5980-11e8-8c23-83493ba049c2:&amp;lt;span style=&amp;#34;color:#ff0000;&amp;#34;&amp;gt;&amp;lt;strong&amp;gt;2840&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;, view# 3 [mysql@test44 logs]$ grep &amp;#34;New cluster view&amp;#34; mariadb.log |awk -F: &amp;#39;END { print $1&amp;#34;:&amp;#34;$2&amp;#34;:&amp;#34;$3 $6&amp;#34;:&amp;#34;$7}&amp;#39; 180518 15:55:03 [Note] WSREP 874d8e7e-5980-11e8-8c23-83493ba049c2:&amp;lt;strong&amp;gt;&amp;lt;span style=&amp;#34;color:#ff0000;&amp;#34;&amp;gt;3068&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;, view# 4 [mysql@test43 logs]$ grep &amp;#34;New cluster view&amp;#34; mariadb.log |awk -F: &amp;#39;END { print $1&amp;#34;:&amp;#34;$2&amp;#34;:&amp;#34;$3 $6&amp;#34;:&amp;#34;$7}&amp;#39; 180518 15:55:41 [Note] WSREP 874d8e7e-5980-11e8-8c23-83493ba049c2:&amp;lt;strong&amp;gt;&amp;lt;span style=&amp;#34;color:#ff0000;&amp;#34;&amp;gt;3111&amp;lt;/span&amp;gt;&amp;lt;/strong&amp;gt;, view# -1 得知三个节点数据的状态 ：3111&amp;gt;3068&amp;gt;2840</description></item></channel></rss>